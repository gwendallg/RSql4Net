# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
  - main
  - develop
  - release/*
  - feature/*
  - hotfix/*
  - bugfix/*
  - support

variables:
  - group: rsql4net.vars
  - name: disable.coverage.autogenerate
    value: 'true'
  - name: codecoveragehistory.directory
    value: '$(Build.ArtifactStagingDirectory)\history'
  - name: codecoveragehistory.feedName
    value: '$(Build.Repository.Name)-$(Build.SourceBranchName)'

pool:
  vmImage: ubuntu-latest

steps:

  - task: gitversion/setup@0
    displayName: 'GitVersion install tools'
    inputs:
      versionSpec: '$(GitVersion)'

  - task: gitversion/execute@0
    displayName: 'Execute GitVersion'
    inputs:
      useConfigFile: true
      configFilePath: 'GitVersion.yml'

  - task: JavaToolInstaller@0
    displayName: 'Java JDK install'
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  - task: Bash@3
    displayName: 'Generate C# Antlr4 Parser & Visitor'
    inputs:
      targetType: 'inline'
      script: |-
        java  \
          -jar $(Build.SourcesDirectory)/grammar/antlr4-4.9.3-complete.jar \
          $(Build.SourcesDirectory)/grammar/RSqlQuery.g \
          -o $(Build.SourcesDirectory)/src/RSql4net/Models/Queries \
          -Dlanguage=CSharp \
          -listener \
          -encoding UTF-8 \
          -visitor \
          -package RSql4Net.Models.Queries

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 6.x'
    inputs:
      version: 6.x

  - task: Bash@3
    displayName: 'Dotnet tools install components'
    inputs:
      targetType: 'inline'
      script: |-
        dotnet tool install --global coverlet.console --version 3.2.0 && \
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.10

  - task: DotNetCoreCLI@2
    displayName: Restore package
    inputs:
      command: restore
      projects: RSql4Net.sln
      #env:
      #  SONAR_CLOUD_LOGIN: $(SonarCloud.Login)
      
  - task: DotNetCoreCLI@2
    displayName: Build solution
    inputs:
      command: build
      projects: RSql4Net.sln

  - task: Bash@3
    displayName: 'Test solution'
    inputs:
      targetType: 'inline'
      script: |-
        dotnet test --logger trx --results-directory $(Build.SourcesDirectory)/_temp --no-restore --no-build --logger trx --collect:"XPlat Code Coverage" $(Build.SourcesDirectory)/RSql4Net.sln


  #- task: DotNetCoreCLI@2
  #  displayName: Test solution
  #  inputs:
  #    command: test
  #    projects: RSql4Net.sln
  #    arguments: --no-restore --no-build --output $(Build.SourcesDirectory)/TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --logger trx --collect:"XPlat Code Coverage"

  - task: reportgenerator@5
    displayName: 'Generate code coverage report'
    inputs:
      reports: '*/**/coverage.cobertura.xml'
      targetdir: coverage-results
      sourcedirs: $(System.DefaultWorkingDirectory)/src
      verbosity: 'Verbose'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/coverage-results/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/coverage-results'

  - task: NuGetCommand@2
    displayName: 'Publish package'
    inputs:
      command: 'push'
      packagesToPush: '$(System.DefaultWorkingDirectory)/**/RSql4Net*.nupkg;!$(System.DefaultWorkingDirectory)/**/RSql4Net*.symbols.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'gwendallg-nuget'
    condition: |-
      and(
        succeeded(), 
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          eq(variables['Build.SourceBranch'], 'refs/heads/develop')
        )
      )

  - task: Docker@2
    displayName: Docker Build and Publish
    inputs:
      containerRegistry: 'gwendallg-docker'
      repository: 'gwendallg/rsql4net-sample'
      command: 'buildAndPush'
      Dockerfile: 'Dockerfile'
      tags: |-
        $(GitVersion.LegacySemVer)
    condition: |-
      and(
        succeeded(), 
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          eq(variables['Build.SourceBranch'], 'refs/heads/develop')
        )
      )
  - task: Docker@2
    displayName: Docker Build and Publish ( latest )
    inputs:
      containerRegistry: 'gwendallg-docker'
      repository: 'gwendallg/rsql4net-sample'
      command: 'buildAndPush'
      Dockerfile: 'Dockerfile'
      tags: |-
       latest
    condition: |-
      and(
        succeeded(), 
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )