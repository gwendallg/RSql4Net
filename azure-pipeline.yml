# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
  - main
  - develop
  - release/*
  - feature/*
  - hotfix/*
  - bugfix/*
  - support

variables:
  - group: rsql4net.vars

pool:
  vmImage: ubuntu-latest

steps:
  
  - task: gitversion/setup@0
    displayName: 'GitVersion install tools'
    inputs:
      versionSpec: '$(GitVersion)'

  - task: gitversion/execute@0
    displayName: 'Execute GitVersion'
    inputs:
      useConfigFile: true
      configFilePath: 'GitVersion.yml'

  - task: Bash@3
    displayName: 'Dotnet tools install components'
    inputs:
      targetType: 'inline'
      script: |-
        dotnet tool install --global coverlet.console --version 3.2.0 && \
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.10

  - task: JavaToolInstaller@0
    displayName: 'Java JDK install'
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  - task: Bash@3
    displayName: 'Generate C# Antlr4 Parser & Visitor'
    inputs:
      targetType: 'inline'
      script: |-
        java  \
          -jar $(Build.SourcesDirectory)/grammar/antlr4-4.9.3-complete.jar \
          $(Build.SourcesDirectory)/grammar/RSqlQuery.g \
          -o $(Build.SourcesDirectory)/src/RSql4net/Models/Queries \
          -Dlanguage=CSharp \
          -listener \
          -encoding UTF-8 \
          -visitor \
          -package RSql4Net.Models.Queries
        
  - task: DotNetCoreCLI@2
    displayName: 'Restore Solution'
    inputs:
      command: 'restore'
      project: 'RSql4Net.sln'
      verbosityRestore: 'Normal'

  - task: SonarCloudPrepare@1
    displayName: 'SonarCloud prepare'
    inputs:
      SonarCloud: 'gwendallg-sonar'
      organization: 'gwendallg'
      scannerMode: 'MSBuild'
      projectKey: $(SonarCloud.Project.Key)
      projectName: 'RSql4Net'
      extraProperties: |
        sonar.cs.opencover.reportsPaths@=$(Agent.TempDirectory)/coverage-results/Cobertura.xml
        sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: 'build'
      project: 'RSql4Net.sln'
      configuration: $(buildConfiguration)
      arguments: '--property:Version=$(GitVersion.NuGetVersionV2)'

  - task: DotNetCoreCLI@2
    displayName: Test solution
    inputs:
      command: test
      projects: $(Build.SourcesDirectory)/src/RSql4Net.Tests/RSql4Net.Tests.csproj
      arguments: --configuration $(buildConfiguration) --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Agent.TempDirectory)/coverage/ /p:MergeWith=$(Agent.TempDirectory)/coverage/ --collect "XPlat Code Coverage"

  - task: PublishTestResults@2
    displayName: 'Publish test report'
    inputs:
      testResultsFormat: 'VsTest'
      testResultsFiles: $(Agent.TempDirectory)/*.trx
      mergeTestResults: false

  - task: reportgenerator@5
    displayName: 'Generate code coverage report'
    inputs:
      reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      targetdir: $(Agent.TempDirectory)/coverage-results
      sourcedirs: $(System.DefaultWorkingDirectory)/src
      verbosity: 'Verbose'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/coverage-results/Cobertura.xml'
      reportDirectory: '$(Agent.TempDirectory)/coverage-results'

  - task: SonarCloudAnalyze@1
    displayName: 'SonarCloud analyze'

  - task: SonarCloudPublish@1
    displayName: 'SonarCloud publish'
    inputs:
      pollingTimeoutSec: '300'
      
  - task: DotNetCoreCLI@2
    displayName: 'Create package'
    inputs:
      command: 'pack'
      packagesToPush: '$(System.DefaultWorkingDirectory)/**/RSql4Net*.nupkg;!$(System.DefaultWorkingDirectory)/**/RSql4Net*.symbols.nupkg'
      arguments: '--no-build'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'NugetVersion'
      verbosityPack: 'Normal'
    condition: |-
      not(
        and(
          succeeded(), 
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
      
  - task: DotNetCoreCLI@2
    displayName: 'Publish package (external feed )'
    inputs:
      command: 'push'
      packagesToPush: '$(System.DefaultWorkingDirectory)/**/RSql4Net*.nupkg;!$(System.DefaultWorkingDirectory)/**/RSql4Net*.symbols.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'gwendallg-nuget'
      arguments: '--no-build'
    condition: |-
      and(
        succeeded(), 
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )

  - task: DotNetCoreCLI@2
    displayName: 'Publish package ( internal feed )'
    inputs:
      command: 'push'
      packagesToPush: '$(System.DefaultWorkingDirectory)/**/RSql4Net*.nupkg;!$(System.DefaultWorkingDirectory)/**/RSql4Net*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishFeedCredentials: 'rsql4net-feed'
      arguments: '--no-build'
    condition: |-
      and(
        succeeded(), 
        not(
          eq(variables['Build.SourceBranch'], 'refs/heads/master')
        )
      )
     
  - task: Docker@2
    displayName: Docker Build and Publish
    inputs:
      containerRegistry: 'gwendallg-docker'
      repository: 'gwendallg/rsql4net-sample'
      command: 'buildAndPush'
      Dockerfile: 'Dockerfile'
      tags: $(NugetVersion)
    condition: |-
      and(
        succeeded(), 
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          eq(variables['Build.SourceBranch'], 'refs/heads/develop')
        )
      )
  - task: Docker@2
    displayName: Docker Build and Publish ( latest )
    inputs:
      containerRegistry: 'gwendallg-docker'
      repository: 'gwendallg/rsql4net-sample'
      command: 'buildAndPush'
      Dockerfile: 'Dockerfile'
      tags: latest
    condition: |-
      and(
        succeeded(), 
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )

  